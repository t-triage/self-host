#!/bin/sh

# Config
. $(pwd)/ttriage.conf

databaseName=${DB:-ttriage}

set -e

showUsage() {
    case "$1" in
        "pull")
            cat <<-EOF
Usage $0 pull 
Pull the app using the images hash specified in ttriage.conf file.
Example: $0 pull    # Reads BACKEND_IMAGE_HASH FRONTEND_IMAGE_HASH from $0

Alternative you can set inline which image hash should be installed instead.
$0 pull <backend-image-hash> <frontend-image-hash>
Example: $0 pull 7a52981547df2eb9bbb016f4cc3410aad1698357 a585fa538f7046767cf3abeca3da3b8e0f430b14
EOF
            ;;
        "upgrade")
            cat <<-EOF
Usage: $0 upgrade <backend|frontend> <image-hash>
Upgrade from our registry and recreate a single container [backend|frontend]
Example: $0 upgrade frontend a585fa538f7046767cf3abeca3da3b8e0f430b14

Alternative you can upgrade both images
$0 upgrade all <backend-image-hash> <frontend-image-hash>
Example: $0 upgrade all 7a52981547df2eb9bbb016f4cc3410aad1698357 a585fa538f7046767cf3abeca3da3b8e0f430b14

Upgrade to 'latest'
$0 upgrade <backend|frontend|all>
Upgrades backend, frontend or both respectively using tag 'latest' as default
Example: $0 upgrade all
EOF
            ;;
        "rebuild")
            cat <<-EOF
Usage: $0 rebuild <backend|frontend|all>
It will recreate one or all containers with the same image. This is useful to hard reset a container.
Example: $0 rebuild backend
Example: $0 rebuild all
EOF
            ;;
        "import")
            cat <<-EOF
Usage: $0 import <backend|frontend> image.tar
Import a .tar image instead of downloading it from our registry.
Example: $0 import backend latest-back.tar
EOF
            ;;
        "exp")
            cat <<-EOF
Usage: $0 export <backend|frontend> <image name with/without path>
Export the latest docker image to a .tar file. You can use this image with ./$0 pull command.
Example: $0 export backend latest-back         # creates a latest-back.tar
Example: $0 export frontend /home/user/backups/front-2019         # creates a /home/user/backups/front-2019.tar
EOF
            ;;
        "db")
            cat <<-EOF
Usage: $0 db
Connects to the local postgres db
EOF
            ;;
        "logs")
            cat <<-EOF
Usage: $0 logs
Show backend logs
EOF
            ;;
        *)
            echo "Usage: $0 <pull [--help]|upgrade|rebuild|import|export|ps|db|backup|restart|logs|login>"
            ;;
    esac
}

dockerLogin() {
    echo ""
    if [ -n "$DOCKER_USER" ] ; then
        echo "Going to authenticate with credentials provided in 'ttriage.conf' file before performing action..."
        docker login -u $DOCKER_USER -p $DOCKER_PASSWD $DOCKER_REGISTRY_SERVER
    else
        echo "Going to perform action without authentication..."
    fi
}

pullBackend() {
    dockerLogin
    echo "\nPulling.. $1"
    docker pull $DOCKER_REGISTRY_SERVER/$BACKEND_IMAGE:$1
    echo "Setting as clarolab/ttriage:latest"
    docker tag $DOCKER_REGISTRY_SERVER/$BACKEND_IMAGE:$1 clarolab/ttriage:latest
}

pullFrontend() {
    dockerLogin
    echo "\nPulling.. $1"
    docker pull $DOCKER_REGISTRY_SERVER/$FRONTEND_IMAGE:$1
    echo "Setting as clarolab/ttriage-front:latest"
    docker tag $DOCKER_REGISTRY_SERVER/$FRONTEND_IMAGE:$1 clarolab/ttriage-front:latest
}

if [ $# -lt 1 ]; then
	showUsage
else
    case "$1" in
        "pull")
            if [ "$2" = "--help" ] ; then
                showUsage pull
            else
                dockerLogin || {
                    echo "Login failed"
                    exit 3
                }
                
                printf "\n\nPulling docker images..."
                if [ $# -gt 2 ]; then
                    BACKEND_IMAGE_HASH=$2
                    FRONTEND_IMAGE_HASH=$3
                fi
                docker pull $DOCKER_REGISTRY_SERVER/$BACKEND_IMAGE:$BACKEND_IMAGE_HASH
                docker tag $DOCKER_REGISTRY_SERVER/$BACKEND_IMAGE:$BACKEND_IMAGE_HASH clarolab/ttriage:latest

                docker pull $DOCKER_REGISTRY_SERVER/$FRONTEND_IMAGE:$FRONTEND_IMAGE_HASH
                docker tag $DOCKER_REGISTRY_SERVER/$FRONTEND_IMAGE:$FRONTEND_IMAGE_HASH clarolab/ttriage-front:latest
                echo "Done, do a \"$0 ps start\" to run the app"
            fi
            ;;
        "upgrade")
            if [ $# -lt 2 ] || [ "$2" = "--help" ] ; then
                showUsage upgrade
            else
                bversion="latest"
                fversion="latest"

                if [ "$3" != "" ] ; then
                    bversion="$3"
                fi

                case "$2" in
                    back*)
                        pullBackend "$bversion"
                        ./$0 rebuild back
                    ;;
                    front*)
                        pullFrontend "$bversion"
                        ./$0 rebuild front
                    ;;
                    "all")
                        if [ "$3" != "" ] ; then
                            if [ "$4" != "" ] ; then
                                fversion="$4"
                            else
                                showUsage upgrade
                                exit
                            fi
                        fi
                        echo "Pulling.. Backend: $bversion and Frontend: $fversion"
                        pullBackend $bversion
                        pullFrontend $fversion
                        ./$0 rebuild all
                    ;;
                    *)
                        showUsage upgrade
                    ;;
                esac

            fi
            ;;

        "rebuild")
            if [ $# -lt 2 ] || [ "$2" = "--help" ] ; then
                showUsage rebuild
            else
                echo "\nRebuilding..."
                case "$2" in
                    back*)
                        docker-compose up -d --force-recreate --no-deps --build backend
                        ;;
                    front*)
                        docker-compose up -d --force-recreate --no-deps --build front
                        ;;
                    "all")
                        docker-compose up --force-recreate --build -d
                        ;;
                esac
            fi
            ;;

        "import")
            if [ $# -lt 2 ] || [ "$2" = "--help" ] ; then
                showUsage import
            else
                echo "\nImporting..."
                docker load -i $2
                echo "Done, do a \"$0 rebuild backend\" to apply the new image"
                if [ "$4" = "--rebuild-all" ]; then 
                    ./$0 rebuild all
                fi
            fi
            ;;

        "export")
            if [ $# -lt 3 ] || [ "$2" = "--help" ] ; then
                showUsage exp
            else
                echo "\nExporting..."
                case "$2" in
                    back*)
                        docker save clarolab/ttriage:latest -o "$3"
                        ;;
                    front*)
                        docker save clarolab/ttriage-front:latest -o "$3"
                        ;;
                esac
                echo "Export donde, saved on $3"
            fi
            ;;

        "ps")
            case "$2" in
                "")
                    docker-compose ps ${@:3}
                    ;;
                "start")
                    docker-compose up -d
                    ;;
                "stop")
                    docker-compose down
                    ;;
                "restart")
                    docker-compose down && docker-compose up -d
                    ;;
                *)
                    docker-compose ${@:2}
                    ;;
            esac
            ;;
         "logs")
            dockerId=`docker ps | grep clarolab/ttriage | grep java | awk '{print $1}'`
            docker logs -f $dockerId
            ;;
         "db")
            dockerId=`docker ps | grep postgres | awk '{print $1}'`
            docker exec -it $dockerId /bin/bash -c 'psql -U ttriage '$databaseName
            ;;
         "backup")
            DATE=`date +%F`
            containerIdProxy=`docker ps | grep postgres:11-alpine | awk '{print $1}'`
            ipAddress=`docker inspect $containerIdProxy | grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" | tail -1`
            pg_dump -h $ipAddress -U ttriage $databaseName > ${DATE}ttriage.sql
            gzip ${DATE}ttriage.sql
            ;;
         "login")
            dockerId=`docker ps | grep clarolab/ttriage | grep java | awk '{print $1}'`
            docker exec -it $dockerId /bin/sh
            ;;
         "restart")
            dockerId=`docker ps | grep clarolab/ttriage | grep java | awk '{print $1}'`
            docker exec -it $dockerId /bin/sh -c 'rm -rf /logs/std-logger.log'
            docker-compose down
            docker-compose up -d
            ;;
        *)
            showUsage
            ;;
    esac
fi   
